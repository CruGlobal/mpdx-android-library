// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.deps = [
            kotlin_version  : '1.5.21',
    ]

    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:4.2.2"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${deps.kotlin_version}"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id "com.vanniktech.android.junit.jacoco" version "0.16.0"
}

allprojects {
    repositories {
        google()
        mavenCentral()
        jcenter() // Warning: this repository is going to shut down soon
    }
}

subprojects {
    apply plugin: 'com.android.library'
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-kapt'

    group 'org.cru.mpdx.android'
    version '1.0.0-SNAPSHOT'


    apply plugin: 'maven-publish'
    afterEvaluate {
        publishing {
            publications {
                release(MavenPublication) {
                    from components.release

                    groupId = project.group
                    artifactId = project.name
                    version = project.version

                    pom.withXml {
                        def scm = asNode().appendNode('scm')
                        scm.appendNode('connection', POM_SCM_CONNECTION)
                        scm.appendNode('developerConnection', POM_SCM_CONNECTION)
                    }

                }
            }
            repositories {
                maven {
                    name "cruGlobalMavenRepository"

                    if (project.version.endsWith('-SNAPSHOT')) {
                        url "https://cruglobal.jfrog.io/cruglobal/list/maven-cru-android-public-snapshots-local/"
                    } else {
                        url "https://cruglobal.jfrog.io/cruglobal/list/maven-cru-android-public-releases-local/"
                    }

                    credentials(PasswordCredentials)
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task jacocoTestReport {
    subprojects.each { dependsOn(it.tasks.withType(JacocoReport)) }
}
